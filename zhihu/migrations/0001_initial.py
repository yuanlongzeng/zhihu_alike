# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2018-05-17 21:38
from __future__ import unicode_literals

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nick_name', models.CharField(max_length=50, unique=True, verbose_name='昵称')),
                ('gender', models.CharField(choices=[('F', '女'), ('M', '男')], default='M', max_length=2, verbose_name='性别')),
                ('desc', models.CharField(max_length=200, verbose_name='简介')),
                ('email', models.EmailField(max_length=64, unique=True, verbose_name='邮箱')),
                ('mobile', models.CharField(max_length=11, unique=True, verbose_name='手机号')),
                ('photo', models.CharField(max_length=100, unique=True, verbose_name='头像')),
                ('user_type', models.CharField(choices=[('gr', '个人'), ('org', '机构')], default='gr', max_length=10)),
                ('user_status', models.CharField(choices=[('normal', '正常'), ('stop', '停用'), ('delete', '删除')], max_length=10)),
                ('status', models.BooleanField(default=False, verbose_name='有效标志')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('created_date', models.DateTimeField(default=datetime.datetime.now)),
                ('recent_modify_date', models.DateTimeField(default=datetime.datetime.now)),
                ('votesup', models.IntegerField(verbose_name='赞同')),
                ('unvotes', models.IntegerField(verbose_name='反对')),
                ('status', models.BooleanField(default=False, verbose_name='有效标志')),
            ],
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('created_date', models.DateTimeField(default=datetime.datetime.now)),
                ('recent_modify_date', models.DateTimeField(default=datetime.datetime.now)),
            ],
        ),
        migrations.CreateModel(
            name='Column',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('desc', models.CharField(max_length=200)),
                ('created_date', models.DateTimeField(default=datetime.datetime.now)),
                ('recent_modify_date', models.DateTimeField(default=datetime.datetime.now)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='作者')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('object_id', models.IntegerField(verbose_name='关联的表中的数据行的ID')),
                ('created_date', models.DateTimeField(default=datetime.datetime.now)),
                ('status', models.BooleanField(default=False, verbose_name='有效标志')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType', verbose_name='关联的表名称')),
                ('reply_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='zhihu.Comment', verbose_name='回复')),
                ('use', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='作者')),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fromid', models.IntegerField()),
                ('toid', models.IntegerField()),
                ('content', models.TextField()),
                ('created_date', models.DateTimeField(default=datetime.datetime.now)),
                ('status', models.BooleanField(default=False, verbose_name='有效标志')),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('content', models.TextField()),
                ('clicks', models.IntegerField()),
                ('created_date', models.DateTimeField(default=datetime.datetime.now)),
                ('recent_modify_date', models.DateTimeField(default=datetime.datetime.now)),
                ('status', models.BooleanField(default=False, verbose_name='有效标志')),
                ('comment', models.ManyToManyField(to='zhihu.Comment')),
                ('creator', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='creator', to=settings.AUTH_USER_MODEL, verbose_name='提问者')),
                ('editor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='edior', to=settings.AUTH_USER_MODEL, verbose_name='编辑者')),
            ],
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('desc', models.CharField(max_length=100)),
                ('status', models.BooleanField(default=False, verbose_name='有效标志')),
                ('created_date', models.DateTimeField(default=datetime.datetime.now)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='zhihu.Topic')),
            ],
        ),
        migrations.AddField(
            model_name='question',
            name='topics',
            field=models.ManyToManyField(blank=True, related_name='topics', to='zhihu.Topic', verbose_name='话题'),
        ),
        migrations.AddField(
            model_name='article',
            name='column',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zhihu.Column', verbose_name='所属专栏'),
        ),
        migrations.AddField(
            model_name='article',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='作者'),
        ),
        migrations.AddField(
            model_name='answer',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zhihu.Question'),
        ),
        migrations.AddField(
            model_name='answer',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='collections',
            field=models.ManyToManyField(blank=True, related_name='collection_user', to='zhihu.Answer', verbose_name='收藏'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='follow_questions',
            field=models.ManyToManyField(blank=True, related_name='followers', to='zhihu.Question', verbose_name='关注问题'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='followings',
            field=models.ManyToManyField(related_name='funs', to=settings.AUTH_USER_MODEL, verbose_name='关注'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='unvote_answers',
            field=models.ManyToManyField(blank=True, related_name='unvote_user', to='zhihu.Answer', verbose_name='反对答案'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='vote_answers',
            field=models.ManyToManyField(blank=True, related_name='vote_user', to='zhihu.Answer', verbose_name='点赞答案'),
        ),
    ]
